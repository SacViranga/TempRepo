private static void DrawReportOnEdit(
    ReportItemConfiguration reportItemConfiguration,
    IEnumerable<DataContainer> dataContainers,
    Graphics graphics,
    Rectangle rectangle)
{
    using var titleFont = new Font(DefaultFontName, DefaultFontSize, FontStyle.Bold);
    using var dataFont = new Font(DefaultFontName, DefaultFontSize);

    // Draw Title
    string reportTitle = $"{_reportTitle}\r\n";
    SizeF titleSize = graphics.MeasureString(reportTitle, titleFont, rectangle.Width, _titleFormat);
    graphics.DrawString(reportTitle, titleFont, Brushes.Black, rectangle, _titleFormat);

    int yOffset = rectangle.Y + (int)titleSize.Height;

    // Generate Data Content
    string data = GenerateReportContent(dataContainers);
    SizeF dataSize = graphics.MeasureString(data, dataFont, rectangle.Width, _defaultTextFormat);

    // Update total height
    DefaultSize.Height = (int)(titleSize.Height + dataSize.Height);

    // Handle Content Overflow
    if (dataSize.Height > rectangle.Height - titleSize.Height)
    {
        data = HandleOverflow(data, dataFont, graphics, rectangle, yOffset);
    }

    // Draw Data
    RectangleF dataRectangle = new RectangleF(rectangle.X, yOffset, rectangle.Width, rectangle.Height - yOffset);
    graphics.DrawString(data, dataFont, Brushes.Black, dataRectangle, _defaultTextFormat);
}

private static string HandleOverflow(
    string data,
    Font dataFont,
    Graphics graphics,
    Rectangle rectangle,
    int yOffset)
{
    string[] lines = data.Split(new[] { Environment.NewLine }, StringSplitOptions.None);
    var visibleContent = new StringBuilder();
    int availableHeight = rectangle.Height - yOffset;
    float currentHeight = 0;

    foreach (var line in lines)
    {
        // Measure line size
        SizeF lineSize = graphics.MeasureString(line, dataFont, rectangle.Width, _defaultTextFormat);
        if (currentHeight + lineSize.Height > availableHeight)
        {
            break; // Stop adding lines if height exceeds available space
        }

        if (lineSize.Width <= rectangle.Width)
        {
            visibleContent.AppendLine(line);
            currentHeight += lineSize.Height;
        }
        else
        {
            // Handle line wrapping
            visibleContent.AppendLine(WrapText(line, dataFont, graphics, rectangle.Width));
        }
    }

    return visibleContent.ToString();
}

private static string WrapText(string text, Font font, Graphics graphics, float maxWidth)
{
    var wrappedText = new StringBuilder();
    var currentLine = new StringBuilder();

    foreach (char c in text)
    {
        currentLine.Append(c);
        SizeF lineSize = graphics.MeasureString(currentLine.ToString(), font);
        if (lineSize.Width > maxWidth)
        {
            // Remove last character and start a new line
            currentLine.Remove(currentLine.Length - 1, 1);
            wrappedText.AppendLine(currentLine.ToString());
            currentLine.Clear();
            currentLine.Append(c);
        }
    }

    wrappedText.AppendLine(currentLine.ToString());
    return wrappedText.ToString();
}
