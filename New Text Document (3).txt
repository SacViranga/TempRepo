mdt_user00@ansmz.onmicrosoft.com

Dafa@3408

npm install @openapitools/openapi-generator-cli

npx openapi-generator-cli generate -g typescript-axios -i http://localhost:8080/swagger/v1/swagger.json -o ./src/swagger --additional-properties=supportsES6=true --skip-validate-spec

  CONSTRAINT FK_SalesDetailsSalesId FOREIGN KEY (SalesId)
    REFERENCES Sales(Id)

Scaffold-DbContext "data source=SACHITH-PC;Initial Catalog=SalesTracking;Persist Security Info=False;User ID=sa;Password=pass#word1;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;" Microsoft.EntityFrameworkCore.SqlServer  -context "DatabaseContext" -Force -NoPluralize -NoOnConfiguring

https://www.pluralsight.com/guides/how-to-implement-a-component-%22loop%22-with-react

https://effective-waffle-c5839fce.pages.github.io/?path=/story/atoms-avatar--sample

string.Join("\\", path.Split('\\').Reverse().Skip(1).Reverse());

https://github.com/ShimadzuCorp/Bridge.Signature/commits/development/.github/workflows/unit-test-esignature-service.yml

"json.schemaDownload.enable": true,

Return By -> 差し戻し担当者
Return On -> 差し戻し日時

header - ヘッダー

 window.open(url, '_blank', 'noopener,noreferrer');

public class NotNullOrEmptyAttribute : ValidationAttribute
{
    protected override ValidationResult IsValid(object value, ValidationContext validationContext)
    {
        var str = value as string;
        if (string.IsNullOrEmpty(str))
        {
            return new ValidationResult("The field cannot be null or empty.");
        }

        return ValidationResult.Success;
    }
}

var filteredList = listOfLists
    .Where(innerList => filterList
        .Any(filter => innerList.FirstOrDefault()?.StartsWith(filter) == true))
    .ToList();

        // Filter and order rows
        var filteredAndOrderedRows = expectedVisibleItems
            .Where(config => config.DefaultValue == "Display") // Filter by DefaultValue
            .OrderBy(config => config.DisplayOrder)             // Order by DisplayOrder
            .Select(config =>
            {
                // Match rows by the DisplayResourceId
                var matchingRow = rows.FirstOrDefault(row => row[0].TrimEnd(':') == config.DisplayResourceId);
                return matchingRow != null ? new { config.DisplayOrder, Row = matchingRow } : null;
            })
            .Where(item => item != null)
            .Select(item => item.Row)
            .ToList();

